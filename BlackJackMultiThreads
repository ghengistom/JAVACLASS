 // Executes two Runnables to add elements to a shared SimpleArray.
 import java.util.concurrent.Executors;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.TimeUnit;
public class MainMethodWk15 
{
	public static void main(String[] args)
	{

				
		System.out.println("First");
			//Throw Dice 25 times in seperate threads
				Runnable T1 = new Dice();
			//create variable to hold value of Dice1
				int Dice1;
				for(int i=0; i<2; ++i)
				{
					Dice1 = ((Dice) T1).Roll();
					System.out.print(Dice1);
				}
				System.out.println("");
		System.out.println("Second");
		
			//Throw Dice 25 times in  thread 2
				Runnable T2 = new Dice();
			//create variable to store dice2
				int Dice2;
				for(int i=0; i<2; ++i)
				{
					Dice2 = ((Dice) T2).Roll();
					System.out.print(Dice2);
				}
		System.out.println("Complete");
	}
}
import java.lang.Runnable;

public class DTom implements Runnable
{

	public void run()
	{
		//void YeahBud()
		{
			for (int i=0; i<20; i++)
			System.out.println("YEah buddy!");
		}
	}
}

public class Dice implements Runnable
{
	private int Dice;
	
	Dice()
	{
		Dice = 0;
	}
	
	synchronised()
	int Roll()
	{
		Dice = 1 + (int)(Math.random()*6);
		return Dice;
	}


	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}
}

public class MyThread implements Runnable
{

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}
	void MyThread()
	{
		//Create Variable to store this changing value
			int ChangingNumber;
		
			Dice DiceObject = new Dice();
			ChangingNumber = DiceObject.Roll();
			System.out.print(ChangingNumber);
			
	}
}

// Class that manages an integer array to be shared by multiple
 // threads with synchronization.
 import java.util.Arrays;
 import java.util.Random;
public class TomArray {

	 private final int[] array; // the shared integer array
	 private int writeIndex = 0; // index of next element to be written
	 private final static Random generator = new Random();

	// construct a SimpleArray of a given size
		 public TomArray( int size )
		 {
			 array = new int[ size ];
		 } // end constructor
	// add a value to the shared array
		public synchronized void add( int value ) 
		{
			int position = writeIndex; // store the write index

			 try
			 {
				 // put thread to sleep for 0-499 milliseconds
					Thread.sleep( generator.nextInt( 500 ) );
			 } // end try
			 catch ( InterruptedException ex )
			 {
				 ex.printStackTrace();
			 } // end catch

			 // put value in the appropriate element
			 	array[ position ] = value;
			 	System.out.printf( "%s wrote %2d to element %d.\n",Thread.currentThread().getName(), value, position );
			 	++writeIndex; // increment index of element to be written next
			 	System.out.printf( "Next write index: %d\n", writeIndex );
		} // end method add

	 // used for outputting the contents of the shared integer array
	 	public String toString()
	 	{
	 		return "\nContents of SimpleArray:\n" + Arrays.toString( array );
	 	} // end method toString
 } // end class SimpleArray
 

// Adds integers to an array shared with other Runnables
import java.lang.Runnable;

public class AddDicesto1Array implements Runnable
{
	 private final TomArray sharedTomArray;
	 private final int startValue;

	 public AddDicesto1Array( int value, TomArray array )
	 {
		 startValue = value;
		 sharedTomArray = array;
	 } // end constructor

	 public void run()
	 {
			 for ( int i = startValue; i < startValue + 3; i++ )
		 {
				 sharedTomArray.add( i ); // add an element to the shared array
		 } // end for
	 } // end method run
} // end class ArrayWriter
