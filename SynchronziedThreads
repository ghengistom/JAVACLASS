 // Fig. 26.8: SimpleArray.java
 // Class that manages an integer array to be shared by multiple
 // threads with synchronization.
 import java.util.Arrays;
 import java.util.Random;

public class SimpleArray
 {
	 private final int[] array; // the shared integer array
	 private int writeIndex = 0; // index of next element to be written
	 private final static Random generator = new Random();
	
	// construct a SimpleArray of a given size
		 public SimpleArray( int size )
		 {
			 array = new int[ size ];
		 } // end constructor
	// add a value to the shared array
		public synchronized void add( int value ) 
		{
			int position = writeIndex; // store the write index
			
			 try
			 {
				 // put thread to sleep for 0-499 milliseconds
					Thread.sleep( generator.nextInt( 500 ) );
			 } // end try
			 catch ( InterruptedException ex )
			 {
				 ex.printStackTrace();
			 } // end catch
			
			 // put value in the appropriate element
			 	array[ position ] = value;
			 	System.out.printf( "%s wrote %2d to element %d.\n",Thread.currentThread().getName(), value, position );
			 	++writeIndex; // increment index of element to be written next
			 	System.out.printf( "Next write index: %d\n", writeIndex );
		} // end method add
	
	 // used for outputting the contents of the shared integer array
	 	public String toString()
	 	{
	 		return "\nContents of SimpleArray:\n" + Arrays.toString( array );
	 	} // end method toString
 } // end class SimpleArray
 
 // Fig. 26.6: ArrayWriter.java
 // Adds integers to an array shared with other Runnables
 import java.lang.Runnable;

public class ArrayWriter implements Runnable
 {
	 private final SimpleArray sharedSimpleArray;
	 private final int startValue;
	
	 public ArrayWriter( int value, SimpleArray array )
	 {
		 startValue = value;
		 sharedSimpleArray = array;
	 } // end constructor
	
	 public void run()
	 {
			 for ( int i = startValue; i < startValue + 3; i++ )
		 {
				 sharedSimpleArray.add( i ); // add an element to the shared array
		 } // end for
	 } // end method run
 } // end class ArrayWriter
 
 
 // Fig 26.7: SharedArrayTest.java
 // Executes two Runnables to add elements to a shared SimpleArray.
 import java.util.concurrent.Executors;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.TimeUnit;

public class SharedArrayTest
 {
 public static void main( String[] arg )
 {
 // construct the shared object
 SimpleArray sharedSimpleArray = new SimpleArray( 6 );

 // create two tasks to write to the shared SimpleArray
 ArrayWriter writer1 = new ArrayWriter( 1, sharedSimpleArray );
 ArrayWriter writer2 = new ArrayWriter( 11, sharedSimpleArray );

 // execute the tasks with an ExecutorService
 ExecutorService executor = Executors.newCachedThreadPool();
 executor.execute( writer1 );
 executor.execute( writer2 );

 executor.shutdown();

 try
 {
 // wait 1 minute for both writers to finish executing
 boolean tasksEnded = executor.awaitTermination(1, TimeUnit.MINUTES );

 if ( tasksEnded )
 System.out.println( sharedSimpleArray ); // print contents
 else
 System.out.println(
 "Timed out while waiting for tasks to finish." );
 } // end try
 catch ( InterruptedException ex )
 {
 System.out.println(
 "Interrupted while waiting for tasks to finish." );
 } // end catch
 } // end main
 } // end class SharedArrayTest
